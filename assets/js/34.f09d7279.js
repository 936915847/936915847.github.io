(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{522:function(e,n,s){"use strict";s.r(n);var r=s(4),i=Object(r.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"规则影响参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则影响参数"}},[e._v("#")]),e._v(" 规则影响参数")]),e._v(" "),s("ul",[s("li",[e._v("resource：资源名，即限流规则的作用对象")]),e._v(" "),s("li",[e._v("count: 限流阈值")]),e._v(" "),s("li",[e._v("grade: 限流阈值类型，QPS 或并发线程数，1QPS，0并发线程数")]),e._v(" "),s("li",[e._v("limitApp: 流控针对的调用来源，若为 default 则不区分调用来源")]),e._v(" "),s("li",[e._v("strategy: 调用关系限流策略，选项为资源本身（0），关联资源（1），链路路口（2）")]),e._v(" "),s("li",[e._v("controlBehavior: 流量控制效果选项为直接拒绝(0)、Warm Up(1)、匀速排队(2）")]),e._v(" "),s("li",[e._v("refResource： strategy为链路路口时，只有通过refResource设置的资源入口才会计入统计。strategy为关联资源时，表示多个资源竞争该资源，并发量大时refResource设置的资源优先抢占访问资源。")])]),e._v(" "),s("h2",{attrs:{id:"limitapp详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limitapp详解"}},[e._v("#")]),e._v(" limitApp详解")]),e._v(" "),s("h3",{attrs:{id:"参数说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数说明"}},[e._v("#")]),e._v(" 参数说明")]),e._v(" "),s("p",[e._v("流控规则中的 limitApp 字段用于根据调用来源进行流量控制。该字段的值有以下三种选项，分别对应不同的场景：")]),e._v(" "),s("ul",[s("li",[e._v("default：表示不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。")]),e._v(" "),s("li",[e._v("{some_origin_name}：表示针对特定的调用者，只有来自这个调用者的请求才会进行流量控制。例如 NodeA 配置了一条针对调用者caller1的规则，那么当且仅当来自 caller1 对 NodeA 的请求才会触发流量控制。")]),e._v(" "),s("li",[e._v("other：表示针对除 {some_origin_name} 以外的其余调用方的流量进行流量控制。例如，资源NodeA配置了一条针对调用者 caller1 的限流规则，同时又配置了一条调用者为 other 的规则，那么任意来自非 caller1 对 NodeA 的调用，都不能超过 other 这条规则定义的阈值。")])]),e._v(" "),s("p",[e._v("同一个资源名可以配置多条规则，规则的生效顺序为：{some_origin_name} > other > default")]),e._v(" "),s("h3",{attrs:{id:"some-origin-name-参数如何使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#some-origin-name-参数如何使用"}},[e._v("#")]),e._v(" {some_origin_name}参数如何使用")]),e._v(" "),s("p",[e._v("sentinel是通过ContextUtil.enter(resourceName, origin) 方法中的 origin 参数标明了调用方身份。该方法在com.alibaba.csp.sentinel.adapter.servlet.CommonFilter过滤器中被调用。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n            //...\n            String origin = this.parseOrigin(sRequest);\n            ContextUtil.enter(target, origin);\n            //...\n            chain.doFilter(request, response);\n}\n\nprivate String parseOrigin(HttpServletRequest request) {\n    RequestOriginParser originParser = WebCallbackManager.getRequestOriginParser();\n    String origin = "";\n    if (originParser != null) {\n        origin = originParser.parseOrigin(request);\n        if (StringUtil.isEmpty(origin)) {\n            return "";\n        }\n    }\n    return origin;\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br")])]),s("p",[e._v("通过以上可以看出需要获取一个origin解析器，查看WebCallbackManager会发现RequestOriginParser 被设置为null，并且该接口也没有实现类。所以我们需要自己实现origin解析规则并设置到WebCallbackManager对象。此处在容器加载完成事件中设置，并通过请求地址获取origin。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@Component\npublic class ApplicationStartup implements ApplicationListener<ContextRefreshedEvent> {\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) {\n        //设置limitApp  origin解析规则\n        WebCallbackManager.setRequestOriginParser((request) -> {\n            String origin = request.getRemoteAddr();\n            return origin != null ? origin : "";\n        });\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("以上将参数origin设置为调用者身份的标识。")])])}),[],!1,null,null,null);n.default=i.exports}}]);