(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{514:function(v,_,a){"use strict";a.r(_);var t=a(4),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"单体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[v._v("#")]),v._v(" 单体架构")]),v._v(" "),a("p",[v._v("单体架构一般采用Spring+Struts+Hibernate构建一个基础工程，在工程中创建不同的Service去实现不同的业务场景，将项目构建成一个war包部署在容器上即可使用")]),v._v(" "),a("h2",{attrs:{id:"集群及垂直化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群及垂直化"}},[v._v("#")]),v._v(" 集群及垂直化")]),v._v(" "),a("p",[v._v("当单体架构随着业务场景的复杂度增大，访问量和用户量激增出现出现如下问题：")]),v._v(" "),a("ul",[a("li",[v._v("后端服务器的负载越来越高")]),v._v(" "),a("li",[v._v("业务场景越来越多，war包的代码量持续上升，代码的耦合度越来越高，代码维护和版本控制困难")]),v._v(" "),a("li",[v._v("服务部署时间长，上线成本高（BUG修复，增量版本）")])]),v._v(" "),a("p",[v._v("这时我们会从两个方面去着手优化：")]),v._v(" "),a("ol",[a("li",[v._v("通过横向增加服务器，实现服务的集群部署，提升系统吞吐量")]),v._v(" "),a("li",[v._v("按业务的垂直领域去拆分，减少业务的和耦合度，降低war包的伸缩性困难")])]),v._v(" "),a("h2",{attrs:{id:"soa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soa"}},[v._v("#")]),v._v(" SOA")]),v._v(" "),a("p",[v._v("面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。")]),v._v(" "),a("p",[v._v("通俗的来讲，就是通过之前对单体架构的拆分，提取出多个共享的服务，采用ESB（企业服务总线）来作为系统和服务之间通信的桥梁")]),v._v(" "),a("p",[v._v("SOA主要解决的问题：")]),v._v(" "),a("ol",[a("li",[v._v("共享业务的重用，避免共享业务的重复建设、资源链接的瓶颈问题")]),v._v(" "),a("li",[v._v("服务与服务之间的解耦，服务之间相互独立")]),v._v(" "),a("li",[v._v("信息互通")])]),v._v(" "),a("h2",{attrs:{id:"微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[v._v("#")]),v._v(" 微服务")]),v._v(" "),a("p",[v._v("从定义上来讲，微服务和面向服务（SOA）本质上都是服务化思想的一种体现，我们可以把SOA看作是微服务的超集，也就是多个微服务可以组成一个SOA服务。随着服务粒度的细化，每个具体的业务服务都可以构成独立运行的微服务，每个微服务只关注某个特定的功能。当然SOA的服务粒度在某些场景上也会和微服务重合，而服务的粒度是没有统一的标准的，更多的时候我们要在粒度和团队之间找平衡。")]),v._v(" "),a("h4",{attrs:{id:"soa与微服务的区别："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soa与微服务的区别："}},[v._v("#")]),v._v(" SOA与微服务的区别：")]),v._v(" "),a("ol",[a("li",[v._v("SOA关注的重点是服务的重用性和解决信息孤岛的问题")]),v._v(" "),a("li",[v._v("微服务关注的重点是解耦，PS：解耦是降低业务之间的耦合度，重用性是关注服务的复用")]),v._v(" "),a("li",[v._v("微服务更多的关注在DevOps的持续交付上，服务粒度的细化会导致开发运维的复杂，因此微服务与容器化技术的结合更为紧密")])]),v._v(" "),a("h4",{attrs:{id:"微服务架构的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构的优点"}},[v._v("#")]),v._v(" 微服务架构的优点")]),v._v(" "),a("ol",[a("li",[v._v("复杂度可控：对通用业务更细的粒度的拆分，服务的体积小，复杂度低，开发运维更简单")]),v._v(" "),a("li",[v._v("技术选型灵活：每个微服务由不同的团队维护，可以结合业务特性选择技术栈")]),v._v(" "),a("li",[v._v("可拓展性强：可以根据每个微服务对性能的要求增加单个服务的集群规模，达到优化整个服务的效果")]),v._v(" "),a("li",[v._v("独立部署：发布和修复版本更加灵活高效，迭代速度更快")]),v._v(" "),a("li",[v._v("容错性高：当某一个服务发生故障时，可以将故障隔离在单个服务中，其他服务可以通过重试，降级等方式实现应用层面的容错")])]),v._v(" "),a("h4",{attrs:{id:"微服务架构所面临的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构所面临的问题"}},[v._v("#")]),v._v(" 微服务架构所面临的问题")]),v._v(" "),a("ol",[a("li",[v._v("故障排查：一次请求经历不同的微服务的多次交互，链路过长时，每个微服务产生自己的日志，在寻源问题时比较困难")]),v._v(" "),a("li",[v._v("服务监控：单体建构很容易实现多个功能服务的监控，而在微服务中，我们不仅要对成百上千的微服务进行监控，还要对整个链路进行监控")]),v._v(" "),a("li",[v._v("分布式架构的复杂性：服务与服务间的远程通信，网络的延迟和故障是无法避免的，着呢结果的了应用程序的复杂度")]),v._v(" "),a("li",[v._v("服务依赖：在微服务的迭代中，各个服务之间的存在更多的依赖关系，有依赖关系的服务做出改变时，都要考虑到是否对其他服务产生影响")]),v._v(" "),a("li",[v._v("运维成本：如何快速部署成百上千的微服务，单个微服务流量激增时如何快速扩容，统一管理多服务")])])])}),[],!1,null,null,null);_.default=r.exports}}]);